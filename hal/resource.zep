/**
 * This file is part of the Hal library
 *
 * (c) Ben Longden <ben@nocarrier.co.uk
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * @package Hal
 */

namespace Hal;

/**
 * Hal\Resource
 * The Hal resource document class
 *
 * @package Hal
 * @author Ben Longden <ben@nocarrier.co.uk>
 * @author Brandon Lamb <brandon@brandonlamb.com>
 */

class Resource
{
    /**
     * The uri represented by this representation.
     *
     * @var string
     */
    protected uri;

    /**
     * The data for this resource. An associative array of key value pairs.
     *
     * ["price" => 30.00, "colour" => "blue"]
     *
     * @var array
     */
    protected data;

    /**
     * An array of embedded Hal objects representing embedded resources.
     *
     * @var array
     */
    protected resources;

    /**
     * A collection of Hal\Link objects keyed by the link relation to this resource.
     *
     * ["next" => [Hal\Link]]
     *
     * @var Hal\Collection\Link
     */
    protected links;

    /**
     * Construct a new Hal\Resource object from an array of data. You can markup the
     * data array with certain keys and values in order to affect the
     * generated JSON or XML documents if required to do so.
     *
     * "@" prefix on any array key will cause the value to be set as an
     * attribute on the XML element generated by the parent. i.e, array("x" =>
     * array("@href" => "http://url")) will yield <x href="http://url"></x> in
     * the XML representation. The @ prefix will be stripped from the JSON
     * representation.
     *
     * Specifying the key "value" will cause the value of this key to be set as
     * the value of the XML element instead of a child. i.e, array("x" =>
     * array("value" => "example")) will yield <x>example</x> in the XML
     * representation. This will not affect the JSON representation.
     *
     * @param string uri
     * @param array data
     */
    public function __construct(string! uri = null, var data = null)
    {
        if typeof data == "array" {
            let this->data = data;
        } else {
            let this->data = [];
        }
        let this->uri = uri;
        let this->resources = new Hal\Collection\Resource();
        let this->links = new Hal\Collection\Link();
    }

    /**
     * Get resource"s URI.
     *
     * @return string
     */
    public function getUri() -> string
    {
        return this->uri;
    }

    /**
     * Return an array of data (key => value pairs) representing this resource.
     *
     * @return array
     */
    public function getData()
    {
        return this->data;
    }

    /**
     * Return an array of Hal\Resource objected embedded in this one.
     *
     * @return Hal\Collection\Resource A collection of Hal\Resource
     */
    public function getResources() -> <Hal\Collection\Resource>
    {
        return this->resources;
    }

    /**
     * Return an array of Hal\Link objects representing resources related to this one.
     *
     * @return Hal\Collection\Link A collection of Hal\Link
     */
    public function getLinks() -> <Hal\Collection\Link>
    {
        return this->links;
    }

    /**
     * Add an embedded resource, identified by rel and represented by resource.
     *
     * @param string rel
     * @param Hal\Resource resource
     * @return Hal\Resource
     */
    public function addResource(string! rel, <Hal\Resource> resource = null) -> <Hal\Resource>
    {
        if typeof resource == "null" {
            let resource = new Hal\Resource();
        }
        this->resources->add(rel, resource);
        return this;
    }

    /**
     * Lookup and return an array of Hal\Resource objects for a given relation.
     *
     * @param string rel The resource relation required
     * @return array|bool Array of Hal\Resource objects if found. Otherwise false.
     */
    public function getResource(string! rel)
    {
        return this->resources->get(rel);
    }

    /**
     * Add a link to the resource, identified by rel, located at uri.
     *
     * @param string rel
     * @param string uri
     * @param array attributes Other attributes, as defined by HAL spec and RFC 5988.
     * @return Hal\Resource
     */
    public function addLink(string! rel, string! uri, var attributes = null) -> <Hal\Resource>
    {
        var link;
        let link = new Hal\Link(uri, attributes);
        this->links->add(rel, link);
        return this;
    }

    /**
     * Lookup and return an array of Hal\Link objects for a given relation.  Will also resolve CURIE rels if required.
     *
     * @param string rel The link relation required
     * @return array|bool Array of Hal\Link objects if found. Otherwise false.
     */
    public function getLink(string! rel)
    {
        return this->links->get(rel);
    }

    /**
     * Create a CURIE link template, used for abbreviating custom link relations.
     *
     * $hal->addCurie("acme", "http://.../rels/{rel}");
     * $hal->addLink("acme:test", "http://.../test");
     *
     * @param string name
     * @param string uri
     * @return Hal\Resource
     */
    public function addCurie(string! name, string! uri) -> <Hal\Resource>
    {
        this->addLink("curies", uri, ["name": name, "templated": true]);
        return this;
    }

    /**
     * Fetch a curie if it exists
     *
     * @param string rel
     * @todo - implement later
     */
    public function getCurie(string! rel)
    {
    }
}
